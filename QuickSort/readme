20200029 공현덕
1) Explanation about quickA.c & quickB.c
In quickA.c & quickB.c, I used the method swapping pivot with the first element,
because if the pivot location is in the middle of the array, program has to check
every time wether this is pivot location or not. So, It needs extra n operation,
and this can be reduced into 3 assign operation by using swapping pivot with the
first element.
In quickA.c, I used pointer array & dynamic allocation to copy the array. The size
of pointer array is 13, because 0 for First case, 1 for Last case, 2~11 for Random
case, and 12 for Median-of-three case.
In quickB.c, I used Random Selection for pivot selecting algorithm before partition
-ing the array around the pivot. By this, I could always select (n/2)th-order statistic
for the pivot. Also, I used pointer array which size is 2. I use copy[0] for mine,
copy[1] for crt. For safety, I make else case, and it runs my QuickSort function.
2) Explanation about how did I use qsort function
The qsort() function requires address of array, length of array, size of each element,
and compare function. The compare function needs two pointer for the parameters,
and the function needs to compare the data which is pointed by the pointer. If the first
one is greater than the second one, it returns 1, else if it is smaller, it returns -1,
else if it is equal, it returns 0.
I make compare function in the quickB.c only for using qsort.
3) Explanation about why my function is faster than qsort.
First of all, I failed to make my function faster, even close to the qsort. But it
was my best. I know that the key point to make QuickSort faster is the algorithm of
the pivot selection. The reason is, it is the best case if we get the (n/2)th-order
statistic as a pivot. So, I choose Random select algorithm for pivot searching algorithm.
In my opinion, Deterministic Selection needs O(n) time pre-operation before recursion
& partitioning, which RSelect has identically. Thus, DSelect requires more operation
than the RSelect.
Also, I remove partitioning part in the QuickSort function, since the array is already
partitioned at the RSelect. So, I recursivly call QuickSort right after it gets the pivot
through the RSelect.
However, it still about 100 times slower than the qsort when testing with 10 million numbers.
I have no idea anymore.
